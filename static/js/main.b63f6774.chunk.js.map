{"version":3,"sources":["components/Node/Node.js","components/Navbars/Navbars.jsx","algorithms/BFS.jsx","algorithms/priortyQueue.jsx","algorithms/algorithmsHelper.jsx","algorithms/A_Star.jsx","algorithms/GreedyBestFirstSearch.jsx","components/PathFindingVisualizer/PathFindingVisualizer.jsx","algorithms/Dijkstra.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","isWeighted","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","React","Component","currentAlgo","wallOrWeight","digonalPath","Navbars","visualizeBfs","visualizeDijkstra","visualizeAStar","visualizeGreedyBFS","resetGrid","resetPath","resetWeight","useState","isRuning","setRuning","time","setTime","Time","useEffect","Promise","resolve","setTimeout","algorithmCompletedTime","then","handleClick","Navbar","bg","variant","Brand","Toggle","Collapse","Nav","NavDropdown","title","disabled","Item","onClick","algo","document","getElementById","innerHTML","Button","console","log","Form","Check","type","label","style","row_queue","col_queue","updateUnvisitedNeibours","grid","forPathReconstruction","visitedNodesInOrder","at_row","at_col","direction_row","direction_col","i","length","neibours_row","neibours_col","isVisited","push","val","priorty","next","PriortyQueue","head","newNode","temp","dis","gridIndexToArrayIndex","totalCol","currentRow","currentCol","neiboursUnvisitedNode","direction","neibours","at","weight","heuristic","nodeOne","nodeTwo","Math","abs","STARTING_ROW","STARTING_COL","ENDING_ROW","ENDING_COL","getInitialGrid","createNode","previousNode","getNewGridWithWallToggled","newGrid","slice","node","getNewGridWithWeight","PathFindingVisualizer","state","resetWeights","querySelector","setState","resetPathAnimation","querySelectorAll","resetVisitedAnimation","classList","handleMouseDown","isStartSelected","isFinishSelected","mouseIsPressed","gird","handleMouseEnter","getNewGridWithNewStart","getNewGridWithNewFinish","handleMouseUp","startNode","endNode","TOTAL_NODE","openSet","forPathReconstruntion","Array","hScore","fill","Infinity","enqueue","dequeue","current","neb","new_hScore","GreedyBFS","nodesInShortestOrder","path","reverse","pathLength","getNodeInShortestPathOrderGreedyBFS","animateAlgo","gScore","fScore","new_gScore","A_Star","getNodesInShortestPathOrderAStar","dist","queue","index","idx","currDist","newDist","dijkstra","getNodesInShortestPathOrderDijkstra","visualizeBFS","shift","bfs","getNodesInShortestPathOrderBFS","animateShortestPath","map","rowIdx","nodeIdx","App","href","size","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b63f6774.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Node.css\";\r\n\r\nconst a = '';\r\nclass Node extends React.Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      isWeighted,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : isWeighted\r\n      ? \"node-weight\"\r\n            : \"\";\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      >{a}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Navbars.css\";\r\n\r\nlet currentAlgo = \"\";\r\nexport let wallOrWeight = \"wall\";\r\nexport let digonalPath = false;\r\n\r\nfunction algorithmCompletedTime(time) {\r\n  return new Promise((resolve) => setTimeout(resolve, time));\r\n}\r\n\r\nexport const Navbars = ({\r\n  visualizeBfs,\r\n  visualizeDijkstra,\r\n  visualizeAStar,\r\n  visualizeGreedyBFS,\r\n  resetGrid,\r\n  resetPath,\r\n  resetWeight,\r\n}) => {\r\n\r\n  const [isRuning, setRuning] = useState(false);\r\n  const [time, setTime] = useState(0);\r\n  let Time = 0;\r\n\r\n  const onBtnClick = () => {\r\n    if (currentAlgo === \"\") {\r\n      document.getElementById(\"Vizu\").innerHTML = \"Select Algorithm\";\r\n    } else if (currentAlgo === \"BFS\") {\r\n      resetPath();\r\n      resetWeight();\r\n      Time = visualizeBfs();\r\n    } else if (currentAlgo === \"Dijkstra\") {\r\n      resetPath();\r\n      Time = visualizeDijkstra();\r\n    } else if (currentAlgo === \"AStar\") {\r\n      resetPath();\r\n      Time = visualizeAStar();\r\n    } else if (currentAlgo === \"GreedyBFS\") {\r\n      resetPath();\r\n      Time = visualizeGreedyBFS();\r\n    }\r\n    setTime(Time);\r\n  };\r\n  useEffect(() => {\r\n    if (isRuning) {\r\n      algorithmCompletedTime(time).then(() => {\r\n        setRuning(false);\r\n      });\r\n    }\r\n  }, [isRuning, time]);\r\n\r\n  const handleClick = () => setRuning(true);\r\n\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\">``````````````\r\n      <Navbar.Brand>PATH-FINDER </Navbar.Brand>````\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\" >\r\n          <NavDropdown title=\"Algorithm\" id=\"basic-nav-dropdown\" disabled={isRuning}>\r\n            <NavDropdown.Item\r\n              onClick={() => {\r\n                const algo = document.getElementById(\"Vizu\");\r\n                currentAlgo = \"Dijkstra\";\r\n                algo.innerHTML = \"Visualize Dijkstra Algrithm\";\r\n              }}\r\n            >\r\n              Dijkstra's Shortest Path\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item\r\n              onClick={() => {\r\n                const algo = document.getElementById(\"Vizu\");\r\n                currentAlgo = \"BFS\";\r\n                algo.innerHTML = \"Visualize BFS Algorithm (Unweighted)\";\r\n              }}\r\n            >\r\n              BFS Shortest Path\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item\r\n              onClick={() => {\r\n                const algo = document.getElementById(\"Vizu\");\r\n                currentAlgo = \"AStar\";\r\n                algo.innerHTML = \"Visualize A* Algorithm\";\r\n              }}\r\n            >\r\n              A* Shortest Path\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item\r\n              onClick={() => {\r\n                const algo = document.getElementById(\"Vizu\");\r\n                currentAlgo = \"GreedyBFS\";\r\n                algo.innerHTML = \"Visualize Greedy Algorithm\";\r\n              }}\r\n            >\r\n              Greedy Best First Search\r\n            </NavDropdown.Item>\r\n          </NavDropdown>````\r\n\r\n          <Button\r\n            id=\"resetGrid\"\r\n            className=\"btn_q\"\r\n            variant=\"info\"\r\n            disabled={isRuning}\r\n            onClick={() => {\r\n              resetGrid();\r\n              setTime(1)\r\n              handleClick();\r\n              console.log(Time)\r\n            }}\r\n          >\r\n            Reset Grid\r\n          </Button>``````\r\n          <Button\r\n            id=\"resetPath\"\r\n            className=\"btn_q\"\r\n            variant=\"info\"\r\n            disabled={isRuning}\r\n            onClick={() => {\r\n              resetPath();\r\n              setTime(1)\r\n              handleClick();\r\n            }}\r\n          >\r\n            Clear Path\r\n          </Button>``````\r\n          <Button\r\n            id=\"Vizu\"\r\n            className=\"btn\"\r\n            variant=\"info\"\r\n            disabled={isRuning}\r\n            onClick={() => {\r\n              onBtnClick();\r\n              handleClick();\r\n            }}\r\n          >\r\n            Visualize!\r\n          </Button>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n      <Nav className=\"ww\">\r\n        <NavDropdown title=\"Obstacles\" id=\"basic-nav-dropdown1\" disabled={isRuning}>\r\n          <NavDropdown.Item\r\n            onClick={() => {\r\n              wallOrWeight = \"wall\";\r\n              setTime(1)\r\n            }}\r\n          >\r\n            Wall\r\n          </NavDropdown.Item>\r\n          <NavDropdown.Item\r\n            onClick={() => {\r\n              wallOrWeight = \"weight\";\r\n              setTime(1)\r\n            }}\r\n          >\r\n            Weight\r\n          </NavDropdown.Item>\r\n        </NavDropdown>\r\n      </Nav>````\r\n      <Form>\r\n        <Form.Check\r\n          type=\"switch\"\r\n          id=\"custom-switch\"\r\n          label={\r\n            <span style={{ \"color\": \"white\" }}>Enable Digonal Path</span>\r\n          }\r\n          disabled={isRuning}\r\n          onClick={() => {\r\n            digonalPath = !digonalPath;\r\n            setTime(1)\r\n          }}\r\n        />\r\n      </Form>````\r\n    </Navbar>\r\n  );\r\n};\r\n","import { digonalPath } from \"../components/Navbars/Navbars\";\r\n\r\nconst [row_queue, col_queue] = [[], []];\r\n\r\nexport function bfs(grid, startNode) {\r\n  const forPathReconstruction = new Array(grid.length * grid[0].length);\r\n  const visitedNodesInOrder = [];\r\n  row_queue.push(startNode.row);\r\n  col_queue.push(startNode.col);\r\n  startNode.isVisited = true;\r\n  while (row_queue.length) {\r\n    let at_row = row_queue.shift();\r\n    let at_col = col_queue.shift();\r\n    if (grid[at_row][at_col].isFinish) {\r\n      break;\r\n    }\r\n    updateUnvisitedNeibours(\r\n      grid,\r\n      forPathReconstruction,\r\n      visitedNodesInOrder,\r\n      at_row,\r\n      at_col\r\n      );\r\n    }\r\n    return [visitedNodesInOrder, forPathReconstruction];\r\n  }\r\n  \r\n  function updateUnvisitedNeibours(\r\n    grid,\r\n    forPathReconstruction,\r\n    visitedNodesInOrder,\r\n    at_row,\r\n    at_col\r\n    ) {\r\n      let direction_row;\r\n      let direction_col;\r\n      if (digonalPath) {\r\n        direction_row = [-1, 1, 0, 0, -1, 1, -1, 1];\r\n        direction_col = [0, 0, 1, -1, -1, -1, 1, 1];\r\n      } else {\r\n        direction_row = [-1, 1, 0, 0];\r\n        direction_col = [0, 0, 1, -1];\r\n      }\r\n      for (let i = 0; i < direction_col.length; i++) {\r\n        let neibours_row = at_row + direction_row[i];\r\n        let neibours_col = at_col + direction_col[i];\r\n        if (\r\n          neibours_col < 0 ||\r\n          neibours_row < 0 ||\r\n          neibours_row >= grid.length ||\r\n          neibours_col >= grid[0].length\r\n        ) {\r\n          continue;\r\n        }\r\n        if (grid[neibours_row][neibours_col].isWall) {\r\n          continue;\r\n        }\r\n        if (!grid[neibours_row][neibours_col].isVisited) {\r\n          row_queue.push(neibours_row);\r\n          col_queue.push(neibours_col);\r\n          grid[neibours_row][neibours_col].isVisited = true;\r\n          forPathReconstruction[grid[0].length * neibours_row + neibours_col] =\r\n            grid[at_row][at_col];\r\n          // visitedNodesInOrder.push(grid[at_row][at_col]);\r\n        }\r\n        visitedNodesInOrder.push(grid[at_row][at_col]);\r\n      }\r\n}\r\n\r\nexport function getNodesInShortestPathOrderBFS(\r\n  grid,\r\n  forPathReconstruction,\r\n  startNode,\r\n  endNode\r\n) {\r\n  const path = [];\r\n\tfor (\r\n    let i = endNode;\r\n    i != null;\r\n    i = forPathReconstruction[grid[0].length * i.row + i.col]\r\n\t) {\r\n    path.push(i);\r\n  }\r\n\tpath.reverse();\r\n  if (path[0] === startNode) {\r\n    console.log(\"BFS(Unweighted) Path Length: \", path.length)\r\n    return path;\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n\r\n\r\n","class Node {\r\n    constructor(val, priorty) {\r\n        this.val = val;\r\n        this.priorty = priorty;\r\n        this.next = null;\r\n    }\r\n}\r\n\r\nexport class PriortyQueue{\r\n    constructor(){\r\n        this.head = null;\r\n        this.length = 0;\r\n    }\r\n\r\n    enqueue(val, priorty){\r\n        const newNode = new Node(val, priorty);\r\n        let temp = this.head;\r\n        if(this.head === null){\r\n            this.head = newNode;\r\n        } else if(this.head.priorty > newNode.priorty){\r\n            this.head = newNode;\r\n            newNode.next = temp;\r\n        } else {\r\n            while (temp.next !== null && temp.next.priorty < newNode.priorty){\r\n                temp = temp.next;\r\n            }\r\n            newNode.next = temp.next;\r\n            temp.next = newNode;\r\n        }\r\n        this.length++;\r\n    }\r\n\r\n    dequeue(){\r\n        if(this.head === null){\r\n            return \r\n        }\r\n        const temp = this.head\r\n        this.head = this.head.next\r\n        temp.next = null;\r\n        this.length--;\r\n        return temp\r\n    }\r\n\r\n    display(){\r\n        const dis = []\r\n        let temp = this.head\r\n        while (temp !== null){\r\n            dis.push([temp.val, temp.priorty])\r\n            temp = temp.next\r\n        }\r\n        console.log(dis)\r\n    }\r\n}\r\n\r\n\r\n\r\n","import {digonalPath} from \"../components/Navbars/Navbars\";\r\n\r\nexport function gridIndexToArrayIndex(totalCol, currentRow, currentCol) {\r\n    return totalCol * currentRow + currentCol;\r\n}\r\n\r\nexport function neiboursUnvisitedNode(grid, val, visitedNodesInOrder) {\r\n  let direction;\r\n  if (digonalPath) {\r\n    direction = [\r\n      [-1, 0],\r\n      [0, -1],\r\n      [1, 0],\r\n      [0, 1],\r\n      [-1, -1],\r\n      [1, -1],\r\n      [-1, 1],\r\n      [1, 1],\r\n    ];\r\n  } else {\r\n      direction = [\r\n        [-1, 0],\r\n        [0, -1],\r\n        [1, 0],\r\n        [0, 1],\r\n      ];\r\n  \r\n  }\r\n    const neibours = [];\r\n    for (let i = 0; i < direction.length; i++) {\r\n      let at = [val[0] + direction[i][0], val[1] + direction[i][1]];\r\n      let weight;\r\n  \r\n      if (\r\n        at[0] < 0 ||\r\n        at[0] >= grid.length ||\r\n        at[1] >= grid[0].length ||\r\n        at[1] < 0\r\n      ) {\r\n        continue;\r\n      } else if (grid[at[0]][at[1]].isWall) {\r\n        continue;\r\n      } else if (grid[at[0]][at[1]].isWeighted) {\r\n        visitedNodesInOrder.push(grid[val[0]][val[1]]);\r\n          weight = 15;\r\n      } else {\r\n        visitedNodesInOrder.push(grid[val[0]][val[1]]);\r\n        weight = 1;\r\n      }\r\n      neibours.push([at, weight]);\r\n    }\r\n    return neibours;\r\n  }\r\n\r\n","import { PriortyQueue } from \"./priortyQueue\";\r\nimport {\r\n  gridIndexToArrayIndex,\r\n  neiboursUnvisitedNode,\r\n} from \"./algorithmsHelper\";\r\n\r\nfunction heuristic(nodeOne, nodeTwo) {\r\n  let manhattanDistance =\r\n    Math.abs(nodeOne[0] - nodeTwo[0]) + Math.abs(nodeOne[1] - nodeTwo[1]);\r\n  // let diagonalDistance = Math.max(Math.abs(nodeOne[0] - nodeTwo[0]), Math.abs(nodeOne[1] - nodeTwo[1]))\r\n  // let euclideanDistance = Math.sqrt(Math.pow((nodeOne[0] - nodeTwo[0]), 2) + Math.pow((nodeOne[1] - nodeTwo[1]), 2))\r\n  return manhattanDistance;\r\n}\r\n\r\nexport function A_Star(grid, startNode, endNode) {\r\n  const TOTAL_NODE = grid.length * grid[0].length;\r\n\r\n  const openSet = new PriortyQueue(); // queue\r\n  const forPathReconstruntion = new Array(TOTAL_NODE);\r\n  const visitedNodesInOrder = [];\r\n\r\n  const gScore = new Array(TOTAL_NODE).fill(Infinity);\r\n  gScore[\r\n    gridIndexToArrayIndex(grid[0].length, startNode.row, startNode.col)\r\n  ] = 0;\r\n\r\n  const fScore = new Array(TOTAL_NODE).fill(Infinity);\r\n  fScore[gridIndexToArrayIndex(grid[0].length, startNode.row, startNode.col)] =\r\n    gScore[\r\n      gridIndexToArrayIndex(grid[0].length, startNode.row, startNode.col)\r\n    ] + heuristic([startNode.row, startNode.col], [endNode.row, endNode.col]);\r\n\r\n  openSet.enqueue(\r\n    [startNode.row, startNode.col],\r\n    fScore[gridIndexToArrayIndex(grid[0].length, startNode.row, startNode.col)]\r\n  );\r\n\r\n  while (openSet.length) {\r\n    const { val } = openSet.dequeue();\r\n    if (grid[val[0]][val[1]].isVisited) {\r\n      continue\r\n    }\r\n    const current = val;\r\n    grid[current[0]][current[1]].isVisited = true;\r\n    \r\n    if (current[0] === endNode.row && current[1] === endNode.col) {\r\n      return [forPathReconstruntion, visitedNodesInOrder];\r\n    }\r\n    const neibours = neiboursUnvisitedNode(grid, current, visitedNodesInOrder);\r\n    for (let i = 0; i < neibours.length; i++) {\r\n      const [neb, weight] = neibours[i];\r\n      if (grid[neb[0]][neb[1]].isVisited) {\r\n        continue;\r\n      }\r\n      const new_gScore =\r\n        gScore[gridIndexToArrayIndex(grid[0].length, current[0], current[1])] +\r\n        weight;\r\n      if (\r\n        new_gScore <\r\n        gScore[gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])]\r\n      ) {\r\n        // visitedNodesInOrder.push(grid[current[0]][current[1]])\r\n        forPathReconstruntion[\r\n          gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])\r\n        ] = grid[current[0]][current[1]];\r\n        gScore[\r\n          gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])\r\n        ] = new_gScore;\r\n        fScore[gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])] =\r\n          gScore[gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])] +\r\n          heuristic(neb, [endNode.row, endNode.col]);\r\n        \r\n        if (!grid[neb[0]][neb[1]].isVisited) {\r\n          openSet.enqueue(\r\n            neb,\r\n            fScore[gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])]\r\n          );\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n  return [forPathReconstruntion, visitedNodesInOrder];\r\n}\r\n\r\nexport function getNodesInShortestPathOrderAStar(\r\n  grid,\r\n  forPathReconstruntion,\r\n  startNode,\r\n  endNode\r\n) {\r\n  const path = [];\r\n  for (\r\n    let i = endNode;\r\n    i != null;\r\n    i =\r\n      forPathReconstruntion[gridIndexToArrayIndex(grid[0].length, i.row, i.col)]\r\n  ) {\r\n    path.push(i);\r\n  }\r\n  path.reverse();\r\n  let pathLength = 0;\r\n  for (let i = 0; i < path.length; i++) {\r\n    if (grid[path[i].row][path[i].col].isWeighted) {\r\n      pathLength = pathLength + 15;\r\n    } else {\r\n      pathLength = pathLength + 1;\r\n    }\r\n  }\r\n  if (path[0] === startNode) {\r\n    console.log(\"A_Star Path Length: \", pathLength);\r\n    return path;\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n","import { PriortyQueue } from \"./priortyQueue\";\nimport {\n  gridIndexToArrayIndex,\n  neiboursUnvisitedNode,\n} from \"./algorithmsHelper\";\n\nfunction heuristic(nodeOne, nodeTwo) {\n  let manhattanDistance =\n    Math.abs(nodeOne[0] - nodeTwo[0]) + Math.abs(nodeOne[1] - nodeTwo[1]);\n  return manhattanDistance;\n}\n\nexport function GreedyBFS(grid, startNode, endNode) {\n  const TOTAL_NODE = grid.length * grid[0].length;\n\n  const openSet = new PriortyQueue();\n  const forPathReconstruntion = new Array(TOTAL_NODE);\n  const visitedNodesInOrder = [];\n\n  const hScore = new Array(TOTAL_NODE).fill(Infinity);\n  hScore[\n    gridIndexToArrayIndex(grid[0].length, startNode.row, startNode.col)\n  ] = heuristic([startNode.row, startNode.col], [endNode.row, endNode.col]);\n\n  openSet.enqueue(\n    [startNode.row, startNode.col],\n    hScore[gridIndexToArrayIndex(grid[0].length, startNode.row, startNode.col)]\n  );\n\n  while (openSet.length) {\n    const { val } = openSet.dequeue();\n    if (grid[val[0]][val[1]].isVisited) {\n      continue;\n    }\n    const current = val;\n    grid[current[0]][current[1]].isVisited = true;\n\n    if (current[0] === endNode.row && current[1] === endNode.col) {\n      return [forPathReconstruntion, visitedNodesInOrder];\n    }\n\n    const neibours = neiboursUnvisitedNode(grid, current, visitedNodesInOrder);\n    for (let i = 0; i < neibours.length; i++) {\n      const [neb, weight] = neibours[i];\n\n      if (grid[neb[0]][neb[1]].isVisited) {\n        continue;\n      }\n      const new_hScore = heuristic(neb, [endNode.row, endNode.col]) + weight;\n      if (\n        new_hScore <\n        hScore[gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])]\n      ) {\n        forPathReconstruntion[\n          gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])\n        ] = grid[current[0]][current[1]];\n        hScore[gridIndexToArrayIndex(grid[0].length, neb[0], neb[1])] = new_hScore\n        if (!grid[neb[0]][neb[1]].isVisited) {\n          openSet.enqueue(neb, new_hScore);\n        }\n      }\n    }\n  }\n  return [forPathReconstruntion, visitedNodesInOrder];\n}\n\nexport function getNodeInShortestPathOrderGreedyBFS(\n  grid,\n  forPathReconstruntion,\n  startNode,\n  endNode\n) {\n  const path = [];\n  for (\n    let i = endNode;\n    i != null;\n    i =\n      forPathReconstruntion[gridIndexToArrayIndex(grid[0].length, i.row, i.col)]\n  ) {\n    path.push(i);\n  }\n  path.reverse();\n  let pathLength = 0;\n  for (let i = 0; i < path.length; i++) {\n    if (grid[path[i].row][path[i].col].isWeighted) {\n      pathLength = pathLength + 15;\n    } else {\n      pathLength = pathLength + 1;\n    }\n  }\n  if (path[0] === startNode) {\n    console.log(\"GreedyBFS Path Length: \", pathLength);\n    return path;\n  } else {\n    return [];\n  }\n}\n","import React from \"react\";\r\nimport Node from \"../Node/Node\";\r\nimport { Navbars, wallOrWeight } from \"../Navbars/Navbars\";\r\nimport { bfs, getNodesInShortestPathOrderBFS } from \"../../algorithms/BFS\";\r\nimport {\r\n  dijkstra,\r\n  getNodesInShortestPathOrderDijkstra,\r\n} from \"../../algorithms/Dijkstra\";\r\nimport {\r\n  A_Star,\r\n  getNodesInShortestPathOrderAStar,\r\n} from \"../../algorithms/A_Star\";\r\nimport { GreedyBFS, getNodeInShortestPathOrderGreedyBFS } from \"../../algorithms/GreedyBestFirstSearch\"\r\n\r\nimport \"./PathFindingVisualizer.css\";\r\n\r\nconst TOTAL_ROW = 25;\r\nconst TOTAL_COL = 50;\r\n\r\nlet STARTING_ROW = 15;\r\nlet STARTING_COL = 5;\r\n\r\nlet ENDING_ROW = 15;\r\nlet ENDING_COL = 13;\r\n\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < TOTAL_ROW; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < TOTAL_COL; col++) {\r\n      currentRow.push(createNode(row, col));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n\r\n  return grid;\r\n};\r\n\r\nconst createNode = (row, col) => {\r\n\r\n  return {\r\n    row,\r\n    col,\r\n    isStart: row === STARTING_ROW && col === STARTING_COL,\r\n    isFinish: row === ENDING_ROW && col === ENDING_COL,\r\n    isWeighted: false,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithWeight = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = { ...node, isWeighted: !node.isWeighted }\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n}\r\n\r\nconst getNewGridWithNewStart = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = { ...node, isStart: !node.isStart };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithNewFinish = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = { ...node, isFinish: !node.isFinish };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nclass PathFindingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      isStartSelected: [[STARTING_ROW, STARTING_COL], false],\r\n      isFinishSelected: [[ENDING_ROW, ENDING_COL], false],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  resetWeight = () => {\r\n    const { grid } = this.state\r\n    for (let row = 0; row < TOTAL_ROW; row++) {\r\n      for (let col = 0; col < TOTAL_COL; col++) {\r\n        grid[row][col].isWeighted = false;\r\n      }\r\n    }\r\n    let resetWeights = document.querySelector(\".node-weight\")\r\n    if (resetWeights === null) {\r\n      resetWeights = []\r\n    }\r\n    for (let i = 0; i < resetWeights.length; i++) {\r\n      resetWeights[i].className = \"node\";\r\n    }\r\n    this.setState({ grid })\r\n  }\r\n  resetPath = () => {\r\n    const { grid } = this.state;\r\n    for (let row = 0; row < TOTAL_ROW; row++) {\r\n      for (let col = 0; col < TOTAL_COL; col++) {\r\n        grid[row][col].isVisited = false;\r\n      }\r\n    }\r\n    const resetPathAnimation = document.querySelectorAll(\".node-shortest-path\");\r\n    const resetVisitedAnimation = document.querySelectorAll(\".node-visited\");\r\n    for (let i = 0; i < resetVisitedAnimation.length; i++) {\r\n      if (resetVisitedAnimation[i].classList[2] === \"node-weight\") {\r\n        resetVisitedAnimation[i].className = \"node node-weight\";\r\n      } else {\r\n        resetVisitedAnimation[i].className = \"node\";\r\n      }\r\n    }\r\n    for (let i = 0; i < resetPathAnimation.length; i++) {\r\n      if (resetPathAnimation[i].classList[2] === \"node-weight\") {\r\n        resetPathAnimation[i].className = \"node node-weight\";\r\n      } else {\r\n        resetPathAnimation[i].className = \"node\";\r\n      }\r\n    }\r\n\r\n    document.getElementById(`node-${STARTING_ROW}-${STARTING_COL}`).className =\r\n      \"node node-start\";\r\n    document.getElementById(`node-${ENDING_ROW}-${ENDING_COL}`).className =\r\n      \"node node-finish\";\r\n  };\r\n\r\n  resetGrid = () => {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n    this.resetPath();\r\n  };\r\n\r\n  handleMouseDown = (row, col) => {\r\n    if (this.state.grid[row][col].isStart && !this.state.grid[row][col].isFinish) {\r\n      this.setState({ isStartSelected: [[STARTING_ROW, STARTING_COL], true] });\r\n    } else if (this.state.grid[row][col].isFinish && !this.state.grid[row][col].isStart) {\r\n      this.setState({ isFinishSelected: [[ENDING_ROW, ENDING_COL], true] });\r\n    } else if (wallOrWeight === \"wall\") {\r\n      if (!this.state.grid[row][col].isFinish) {\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid, mouseIsPressed: true });\r\n      }\r\n    } else if (wallOrWeight === \"weight\") {\r\n      if (!this.state.grid[row][col].isFinish) {\r\n        const newGrid = getNewGridWithWeight(this.state.grid, row, col);\r\n        this.setState({ gird: newGrid, mouseIsPressed: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleMouseEnter = (row, col) => {\r\n    if (this.state.isStartSelected[1] && !this.state.grid[row][col].isFinish) {\r\n      const { grid, isStartSelected } = this.state;\r\n      grid[isStartSelected[0][0]][isStartSelected[0][1]].isStart = false;\r\n      grid[isStartSelected[0][0]][isStartSelected[0][1]].isWall = false;\r\n      grid[isStartSelected[0][0]][isStartSelected[0][1]].isWeighted = false;\r\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\r\n      STARTING_COL = col;\r\n      STARTING_ROW = row;\r\n      this.setState({\r\n        grid: newGrid,\r\n        isStartSelected: [[STARTING_ROW, STARTING_COL], true],\r\n      });\r\n    } else if (this.state.isFinishSelected[1] && !this.state.grid[row][col].isStart) {\r\n      const { grid, isFinishSelected } = this.state;\r\n      grid[isFinishSelected[0][0]][isFinishSelected[0][1]].isFinish = false;\r\n      grid[isFinishSelected[0][0]][isFinishSelected[0][1]].isWall = false;\r\n      grid[isFinishSelected[0][0]][isFinishSelected[0][1]].isWeighted = false;\r\n      const newGrid = getNewGridWithNewFinish(this.state.grid, row, col);\r\n      ENDING_COL = col;\r\n      ENDING_ROW = row;\r\n      this.setState({\r\n        grid: newGrid,\r\n        isFinishSelected: [[ENDING_ROW, ENDING_COL], true],\r\n      });\r\n    } else if (wallOrWeight === \"wall\") {\r\n      if (this.state.mouseIsPressed && !this.state.grid[row][col].isFinish) {\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid });\r\n      }\r\n    } else if (wallOrWeight === \"weight\") {\r\n      if (this.state.mouseIsPressed && !this.state.grid[row][col].isFinish) {\r\n        const newGrid = getNewGridWithWeight(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleMouseUp = () => {\r\n    this.setState({\r\n      mouseIsPressed: false,\r\n      isStartSelected: [[STARTING_ROW, STARTING_COL], false],\r\n      isFinishSelected: [[ENDING_ROW, ENDING_COL], false],\r\n    });\r\n  };\r\n\r\n  animateShortestPath(nodesInShortestOrder) {\r\n    for (let i = 0; i < nodesInShortestOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n        if (node.isWeighted) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path node-weight\";\r\n        }\r\n        if (node.isStart) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path node-start\";\r\n        } else if (node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path node-finish\";\r\n        }\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  animateAlgo(visitedNodesInOrder, nodesInShortestOrder) {\r\n    let time = 0;\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestOrder);\r\n        }, 5 * i);\r\n        time = time + (50 * nodesInShortestOrder.length);\r\n        return time;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        setTimeout(() => {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-visited\";\r\n          if (node.isWeighted) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node node-visited node-weight\";\r\n          }\r\n          if (node.isStart) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node node-shortest-path node-start\";\r\n          } else if (node.isFinish) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              \"node node-shortest-path node-finish\";\r\n          }\r\n        }, 5);\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-at\";\r\n      }, 5 * i);\r\n      time = time + 5;\r\n    }\r\n\r\n  }\r\n\r\n  visualizeGreedyBFS = () => {\r\n\r\n    let { grid } = this.state;\r\n    const startNode = grid[STARTING_ROW][STARTING_COL];\r\n    const endNode = grid[ENDING_ROW][ENDING_COL]\r\n    const [forPathReconstruction, visitedNodesInOrder] = GreedyBFS(grid, startNode, endNode)\r\n    const nodesInShortestOrder = getNodeInShortestPathOrderGreedyBFS(\r\n      grid,\r\n      forPathReconstruction,\r\n      startNode,\r\n      endNode\r\n    );\r\n    const timeTaken = this.animateAlgo(visitedNodesInOrder, nodesInShortestOrder);\r\n    return timeTaken\r\n  }\r\n\r\n  visualizeAStar = () => {\r\n    let { grid } = this.state;\r\n    const startNode = grid[STARTING_ROW][STARTING_COL];\r\n    const endNode = grid[ENDING_ROW][ENDING_COL];\r\n\r\n    const [forPathReconstruction, visitedNodesInOrder] = A_Star(\r\n      grid,\r\n      startNode,\r\n      endNode\r\n    );\r\n    const nodesInShortestOrder = getNodesInShortestPathOrderAStar(\r\n      grid,\r\n      forPathReconstruction,\r\n      startNode,\r\n      endNode\r\n    );\r\n    const timeTaken = this.animateAlgo(visitedNodesInOrder, nodesInShortestOrder);\r\n    return timeTaken\r\n  };\r\n  visualizeDijkstra = () => {\r\n    let { grid } = this.state;\r\n    const startNode = grid[STARTING_ROW][STARTING_COL];\r\n    const endNode = grid[ENDING_ROW][ENDING_COL];\r\n    const [dist, forPathReconstruction, visitedNodesInOrder] = dijkstra(\r\n      grid,\r\n      startNode\r\n    );\r\n    // console.log([dist, forPathReconstruction, visitedNodesInOrder])\r\n    const nodesInShortestOrder = getNodesInShortestPathOrderDijkstra(\r\n      grid,\r\n      dist,\r\n      forPathReconstruction,\r\n      startNode,\r\n      endNode\r\n    );\r\n    const timeTaken = this.animateAlgo(visitedNodesInOrder, nodesInShortestOrder);\r\n    return timeTaken;\r\n  };\r\n\r\n  visualizeBFS = () => {\r\n\r\n    let { grid } = this.state;\r\n    const startNode = grid[STARTING_ROW][STARTING_COL];\r\n    const endNode = grid[ENDING_ROW][ENDING_COL];\r\n    const [visitedNodesInOrder, forPathReconstruction] = bfs(grid, startNode);\r\n    const nodesInShortestOrder = getNodesInShortestPathOrderBFS(\r\n      grid,\r\n      forPathReconstruction,\r\n      startNode,\r\n      endNode\r\n    );\r\n    const timeTaken = this.animateAlgo(visitedNodesInOrder, nodesInShortestOrder);\r\n    return timeTaken;\r\n  };\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <div>\r\n        <Navbars\r\n          visualizeBfs={this.visualizeBFS}\r\n          visualizeDijkstra={this.visualizeDijkstra}\r\n          visualizeAStar={this.visualizeAStar}\r\n          visualizeGreedyBFS={this.visualizeGreedyBFS}\r\n          resetGrid={this.resetGrid}\r\n          resetPath={this.resetPath}\r\n          resetWeight={this.resetWeight}\r\n        ></Navbars>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {\r\n                    row,\r\n                    col,\r\n                    isStart,\r\n                    isFinish,\r\n                    isWall,\r\n                    isWeighted,\r\n                  } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      isWall={isWall}\r\n                      isWeighted={isWeighted}\r\n                      onMouseDown={this.handleMouseDown}\r\n                      onMouseEnter={this.handleMouseEnter}\r\n                      onMouseUp={this.handleMouseUp}\r\n                      row={row}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PathFindingVisualizer;\r\n","import { PriortyQueue } from \"./priortyQueue\";\r\nimport {\r\n  gridIndexToArrayIndex,\r\n  neiboursUnvisitedNode,\r\n} from \"./algorithmsHelper\";\r\n\r\n\r\nexport function dijkstra(grid, startNode) {\r\n  const forPathReconstruction = new Array(grid.length * grid[0].length);\r\n  const visitedNodesInOrder = [];\r\n\r\n  const dist = new Array(grid.length * grid[0].length).fill(Infinity);\r\n  dist[gridIndexToArrayIndex(grid[0].length, startNode.row, startNode.col)] = 0;\r\n  const queue = new PriortyQueue();\r\n  queue.enqueue([startNode.row, startNode.col], 0);\r\n  while (queue.length) {\r\n    let { val, priorty } = queue.dequeue();\r\n    let index = gridIndexToArrayIndex(grid[0].length, val[0], val[1]);\r\n    grid[val[0]][val[1]].isVisited = true;\r\n    if (grid[val[0]][val[1]].isFinish) {\r\n      return [dist, forPathReconstruction, visitedNodesInOrder];\r\n    }\r\n    if (dist[index] < priorty) {\r\n      continue;\r\n    }\r\n\r\n    let neibours = neiboursUnvisitedNode(grid, val, visitedNodesInOrder);\r\n    for (let i = 0; i < neibours.length; i++) {\r\n      let [idx, currDist] = neibours[i];\r\n      let at = gridIndexToArrayIndex(grid[0].length, idx[0], idx[1]);\r\n      if (grid[idx[0]][idx[1]].isVisited) {\r\n        continue;\r\n      }\r\n      let newDist = dist[index] + currDist;\r\n      if (newDist < dist[at]) {\r\n        forPathReconstruction[at] = grid[val[0]][val[1]];\r\n        visitedNodesInOrder.push(grid[val[0]][val[1]]);\r\n        dist[at] = newDist;\r\n        queue.enqueue(idx, newDist);\r\n      }\r\n    }\r\n  }\r\n  return [dist, forPathReconstruction, visitedNodesInOrder];\r\n}\r\n\r\n\r\nexport function getNodesInShortestPathOrderDijkstra(\r\n  grid,\r\n  dist,\r\n  forPathReconstruction,\r\n  startNode,\r\n  endNode\r\n) {\r\n  const at = gridIndexToArrayIndex(grid[0].length, endNode[0], endNode[1]);\r\n  if (dist[at] === Infinity) {\r\n    return [];\r\n  }\r\n  const path = [];\r\n  for (\r\n    let i = endNode;\r\n    i != null;\r\n    i =\r\n   \r\n        forPathReconstruction[gridIndexToArrayIndex(grid[0].length, i.row, i.col)]\r\n  ) {\r\n    path.push(i);\r\n  }\r\n  path.reverse();\r\n  let pathLength = 0;\r\n  for (let i = 0; i < path.length; i++) {\r\n    if (grid[path[i].row][path[i].col].isWeighted) {\r\n      pathLength = pathLength + 15;\r\n    } else {\r\n      pathLength = pathLength + 1;\r\n    }\r\n  }\r\n  if (path[0] === startNode) {\r\n    console.log(\"Dijkstra Path Length: \", pathLength)\r\n    return path;\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n","import React from 'react';\nimport PathFindingVisualizer from './components/PathFindingVisualizer/PathFindingVisualizer';\nimport { FaGithub } from 'react-icons/fa';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFindingVisualizer></PathFindingVisualizer>\n      <footer className=\"foot\">\n        <p>&copy; PATH-FINDING-VISUALISER by TANMAY MALLICK\n          <a href=\"\" className=\"social\"><FaGithub size='1.3em' color=\"\" /></a></p>\n      </footer>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}